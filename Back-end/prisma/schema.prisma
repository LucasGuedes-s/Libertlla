generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profissionais {
  id            Int        @id @default(autoincrement())
  nome          String
  email         String     @unique
  senha         String
  permissaoId   Int
  foto          String?    @db.VarChar(2048)
  especialidade String
  ocorrencias_chat   Conversa[]
  permissao     Permissoes @relation(fields: [permissaoId], references: [id])
  profissionaisOcorrencias OcorrenciasProfissionais[] // Correta relação 1 para muitos
}

model OcorrenciasProfissionais {
  ocorrenciaId    Int
  profissionalId  Int

  ocorrencia      Ocorrencias @relation(fields: [ocorrenciaId], references: [id])
  profissional    Profissionais @relation(fields: [profissionalId], references: [id])

  @@id([ocorrenciaId, profissionalId])
}

model Ocorrencias {
  id              Int        @id @default(autoincrement())
  tipo_denuncia   String
  tipo_violencia  String
  agressor        String
  provas          String[]   @db.VarChar(2048)
  descricao       String
  local           String?
  data_denuncia   DateTime?  @db.Date
  data_ocorrencia String
  status          String @default("Andamento") // Adicionando um valor padrão
  registro        Int?
  endereco        String?
  ocorrenciasProfissionais OcorrenciasProfissionais[] // ✅ Correta relação 1 para muitos
  registros       Registro[] // ✅ Agora é um array, indicando relação 1 para muitos
  endereco_vitima String
  vitimaId        Int?      // ID da usuária que fez a ocorrência 
  vitima          Vitima? @relation(fields: [vitimaId], references: [id]) // ✅ Correta relação 1 para muitos
}

model Vitima{
  id                    Int        @id @default(autoincrement())
  nome                  String
  dataNascimento        String
  cpf                   String?    @unique
  email                 String     @unique
  senha                 String?
  telefone              String?    @db.VarChar(15)
  genero               String?
  estadoCivil          String?
  profissao            String?
  escolaridade         String?
  endereco             String?
  cidade               String?
  estado               String?
  etnia                String?
  contatosdeEmergencia  String[] @db.VarChar(2048)
  processosJudiciais   String? @db.VarChar(2048)
  registros             Registro[] 
  ocorrencias           Ocorrencias[] // ✅ Correta relação 1 para muitos
  notificacao_botao     Notificacao_botao[] // Correta relação 1 para muitos
  relacao_agressor_vitima relacao_agressor_vitima[] // Correta relação 1 para muitos
}
model relacao_agressor_vitima{
  agressorId  Int
  vitimaId    Int

  agressor    Agressor @relation(fields: [agressorId], references: [id])
  vitima      Vitima   @relation(fields: [vitimaId], references: [id])

  @@id([agressorId, vitimaId]) // Garante que a relação seja única
}
model Agressor{
  id                    Int      @id @default(autoincrement())
  nome                  String
  relacionamento_vitima String?
  cpf                   String?  @unique
  dataNascimento        String?
  email      String?  @unique
  telefone   String?  @db.VarChar(15)
  genero     String?
  estadoCivil String?
  profissao String?
  escolaridade String?
  endereco   String?
  cidade     String?
  estado     String?
  etnia      String?
  caracteristicas_fisicas String?
  relacao_agressor_vitima relacao_agressor_vitima[] // Correta relação 1 para muitos
}

model Registro {
  id         Int        @id @default(autoincrement())
  anexos     String[]   @db.VarChar(2048)
  descricoes String?
  data       String?
  ocorrenciaId Int?     
  testemunhas String[] @db.VarChar(2048)
  assinatura      String? @db.VarChar(2048)
  ocorrencia   Ocorrencias? @relation(fields: [ocorrenciaId], references: [id]) 
  chatId String?  
  chat   Conversa? @relation(fields: [chatId], references: [id])
  vitimaId Int? 
  vitima   Vitima? @relation(fields: [vitimaId], references: [id]) // ✅ Correta relação 1 para muitos
}

model Permissoes {
  id            Int             @id @default(autoincrement())
  descricao     String?
  profissionais Profissionais[]
}

model Notificacao_botao{
  id         Int      @id @default(autoincrement())
  endereco   String
  data       DateTime?
  token      String?
  vitimaId   Int?
  vitima     Vitima? @relation(fields: [vitimaId], references: [id])
}

model Conversa {
  id        String   @id @default(uuid()) // UUID para gerar IDs únicos
  clientId  String   // ID do cliente
  adminId   String?  // ID do admin (pode ser nulo no início)
  messages  Json     // JSONB no PostgreSQL para armazenar a conversa
  status          String @default("Andamento") // Adicionando um valor padrão
  profisssional   Profissionais? @relation(fields: [profissional], references: [id])
  profissional    Int?
  createdAt DateTime @default(now()) // Data da criação
  registros  Registro[] // ✅ Agora é um array, indicando relação 1 para muitos
}
